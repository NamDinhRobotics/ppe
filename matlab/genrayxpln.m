% GENRAYXPLN Generate function RAYXPLN.

% Copyright 2018 Alexander Schaefer

%% Create symbolic variables.
% Create the direction vectors of the three rays that support the plane and
% the ray intersecting the plane.
v1 = sym('v1', [1,3]);
v2 = sym('v2', [1,3]);
v3 = sym('v3', [1,3]);
v = sym('v4', [1,3]);

% Create the radii of the three rays that support the plane and the ray
% intersecting the plane.
r1 = sym('r1', 'real');
r2 = sym('r2', 'real');
r3 = sym('r3', 'real');
r4 = sym('r4', 'real');

% Create the scaling values of the plane direction vectors.
t1 = sym('t1', 'real');
t2 = sym('t2', 'real');

%% Compute radius.
% Compute the endpoints of the rays.
e1 = r1.*v1;
e2 = r2.*v2;
e3 = r3.*v3;
e4 = r4.*v;

% Compute the scaling values of the plane and the radius of the ray
% intersecting the plane.
eqn = e1 + t1.*(e2-e1) + t2.*(e3-e1) == e4;
[A,b] = equationsToMatrix(eqn, [t1,t2,r4]);
x = linsolve(A, b);

% Retrieve the radius of the ray intersecting the plane. 
r = simplify(x(3));

% Compute the Jacobian of the radius with respect to the radii of the rays
% supporting the plane.
p = [r1,r2,r3];
j = simplify(jacobian(r, p));

%% Create function file.
% Create a function file that computes the radius of the ray intersecting
% the plane.
path = strsplit(mfilename('fullpath'),filesep);
path = path(1:find(strcmp(path,'pcd'),1,'last'));
file = fullfile(path{:},'private','rayxpln.m');
matlabFunction(r,j, 'Vars',{v1,v2,v3,r1,r2,r3,v}, 'File',file);

% Read the created function file.
code = splitlines(fileread(file));

% Remove the autogenerated comments.
code([2,3,6]) = [];

% Insert the documentation stored in a file.
docu = fileread(fullfile('pcd','private','rayxpln.docu'));
code = [code(1); splitlines(docu); code(2:end)];

% Write the function file.
fid = fopen(file,'w');
fprintf(fid, '%s\n', code{:});
fclose(fid);
